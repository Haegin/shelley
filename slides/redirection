title redirection

[[ ! -e bad_program ]] && ln -s slides/bad_program bad_program
cp slides/holidays.txt .

echo; read

clear; title pipes

cmd "cat holidays.txt"
echo

cat holidays.txt | indent

echo; read

cmd "cat holidays.txt \e[1;93m|\e[1;37m sort -t, -k 2 -n"

echo; read

cat holidays.txt | sort -t, -k 2 -n | indent

echo; read

clear; title file redirection

cmd "./bad_program"
echo 
./bad_program |& indent

echo; read

cmd "./bad_program \e[1;93m>\e[1;37m months"

echo; read

./bad_program 2>&1 > months | indent
echo; read
cmd "cat months"
echo
cat months | indent

echo; read

cmd "./bad_program \e[1;93m2>\e[1;37m /dev/null > months"

echo; read

./bad_program 2> /dev/null > months
echo
cmd "cat months"
echo
cat months | indent

read; clear; title process redirection

cmd 'diff holidays.txt \e[1;93m<(\e[1;37msort -M holidays.txt\e[1;93m)\e[1;37m'
echo
read
diff holidays.txt <(sort -M holidays.txt) | indent

read; clear; title summary

read; echo; bullet Use pipes to pass standard output from one program to standard input of the next
read; echo; bullet Use file redirection to read or write to files.
read; echo; bullet File redirection can also redirect standard error
read; echo; bullet Process redirection lets you treat the output from another process as a file

read; next
